/*
 * Mandatory:
 *
 * vars.graphite.image.name
 * vars.graphite.image.version
 * vars.graphite.limits.cpu
 * vars.graphite.limits.memory
 * vars.graphite.requests.cpu
 * vars.graphite.requests.memory
 * vars.graphite.allowOnMaster
 * vars.nginx.image.name
 * vars.nginx.image.version
 * vars.nginx.limits.cpu
 * vars.nginx.limits.memory
 * vars.nginx.requests.cpu
 * vars.nginx.requests.memory
 *
 * Optional:
 *
 * vars.graphite.affinityRequired
 * vars.graphite.tolerations
 */

import "tolerations.stg"
import "affinities.stg"

cc-graphite-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Service
metadata:
  name: graphite
  namespace: graphite-andrea
  labels:
    app: graphite
    robobeerun.com/group: graphite
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: 8080
  - name: "carbon-pickle"
    port: 2004
    targetPort: 2004
  - name: "caron-agg"
    port: 2024
    targetPort: 2024
  - name: "statsd"
    port: 8125
    targetPort: 8125
  - name: "statsd-admin"
    port: 8126
    targetPort: 8126
  selector:
    app: graphite

---

apiVersion: v1
kind: Service
metadata:
  name: carbon
  namespace: graphite-andrea
  labels:
    app: graphite
    robobeerun.com/group: graphite
spec:
  type: NodePort
  ports:
  - name: "carbon"
    port: 2003
    targetPort: 2003
    nodePort: 32003
  selector:
    app: graphite

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: graphite
  namespace: graphite-andrea
  labels:
    app: graphite
    robobeerun.com/group: graphite
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: graphite
        robobeerun.com/group: graphite
    spec:
      containers:
      - image: <vars.graphite.image.name>:<vars.graphite.image.version>
        name: graphite
        ports:
        - name: "http"
          containerPort: 8080
        - name: "carbon-receiver"
          containerPort: 2003
        - name: "carbon-pickle"
          containerPort: 2004
        - name: "caron-agg"
          containerPort: 2024
        - name: "statsd"
          containerPort: 8125
        - name: "statsd-admin"
          containerPort: 8126
        resources:
          limits:
            cpu: <vars.graphite.limits.cpu>
            memory: <vars.graphite.limits.memory>
          requests:
            cpu: <vars.graphite.requests.cpu>
            memory: <vars.graphite.requests.memory>
        volumeMounts:
        - mountPath: /opt/graphite
          name: graphite
          subPath: graphite
        - mountPath: /opt/statsd
          name: graphite
          subPath: statsd
        - mountPath: /graphite-conf-in
          name: graphite-config
      - image: <vars.nginx.image.name>:<vars.nginx.image.version>
        name: nginx
        env:
        - name: NGINX_HTTP_PORT
          value: "8080"
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 60
        resources:
          limits:
            cpu: <vars.nginx.limits.cpu>
            memory: <vars.nginx.limits.memory>
          requests:
            cpu: <vars.nginx.requests.cpu>
            memory: <vars.nginx.requests.memory>
        volumeMounts:
        - mountPath: /opt/graphite
          name: graphite
          subPath: graphite
        - mountPath: /nginx-in
          name: nginx-config
      restartPolicy: Always
      volumes:
      - name: graphite
        persistentVolumeClaim:
          claimName: graphite-andrea
      - name: nginx-config
        configMap:
          name: nginx
      - name: graphite-config
        configMap:
          name: graphite
<affinitiesGroup(parent, vars, vars.graphite.affinityRequired)>
<tolerationMaster(parent, vars)>
<tolerations(parent, vars, vars.graphite.tolerations)>

---

>>
